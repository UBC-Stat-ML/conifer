package conifer.ctmc;
import org.ejml.data.DenseMatrix64F;
import org.ejml.data.Eigenpair;
import org.ejml.factory.DecompositionFactory;
import org.ejml.factory.EigenDecomposition;
import org.ejml.ops.EigenOps;
import org.ejml.simple.SimpleMatrix;

import tutorialj.Tutorial;
import bayonet.distributions.Multinomial;
import bayonet.math.EJMLUtils;
import bayonet.math.NumericalUtils;
import bayonet.math.EJMLUtils.SimpleEigenDecomposition;


import java.io.*;
import java.util.*;

import org.jblas.ComplexDoubleMatrix;
import org.jblas.DoubleMatrix;
import org.jblas.MatrixFunctions;
import org.junit.Assert;
import org.junit.Test;

import Jama.EigenvalueDecomposition;
import Jama.Matrix;


// Added by Tingting
import org.jblas.Eigen;

/**
 * A continuous time Markov chain. The main functionalities consists
 * in computing a marginal transition probability and a stationary distibution
 * (see below).
 *
 * This implementation is based on caching the eigendecomposition
 * of the provided rate matrix.
 *
 * @author Alexandre Bouchard (alexandre.bouchard@gmail.com)
 * @author revised by Tingting Zhao (zhaott0416@gmail.com), using jblas package to perform matrix exponential
 * calculation
 *
 */
public class EigenCTMC implements CTMC
{
    private static final double THRESHOLD = 1e-6;
    private final RateMatrix rateMtx;
    private final double [] stationaryDistribution;
    private final double [][] rates;
    public static boolean useDiag = true;

    /**
     * Note: if the RateMatrix is changed in place,
     * these changes will not be mirrored by this class.
     *
     * It should be recreated each time a likelihood
     * calculation is performed.
     */

    public EigenCTMC(double [][] rates)
    {
        RateMatrixUtils.checkValidRateMatrix(rates);
        this.rates = rates;
        this.rateMtx = RateMatrix(rates);
        this.stationaryDistribution = computeStationary();
    }





    public static RateMatrix RateMatrix(double [][] rates)
    {
        DoubleMatrix ratesMatrix = new DoubleMatrix(rates);
        return new RateMatrix(rates);


    }


    public static class RateMatrix
    {
        public final DoubleMatrix rateMtx;

        public RateMatrix(double [][] rates)
        {
            rateMtx = new DoubleMatrix(rates);
        }

    }





    /**
     * Compute and cache the stationary (called by the constructor)
     * @return
     */
    private double[] computeStationary()
    {
        Matrix marginal = new Matrix(marginalTransitionProbability(1.0));
        Matrix exponentiatedTranspose = marginal.transpose();

        double [] result = null;
        final int dim = marginal.getColumnDimension();

//   DoubleMatrix exponentiatedTransposeJBLAS = new DoubleMatrix(exponentiatedTranspose.getArray());
//   Eigen eigenDecompJBLAS = new Eigen();
//   ComplexDoubleMatrix [] eigenVectorAndEigenValue = Eigen.eigenvectors(exponentiatedTransposeJBLAS);
//   ComplexDoubleMatrix eigenVector = eigenVectorAndEigenValue[0];

        EigenvalueDecomposition eigenDecomp = new EigenvalueDecomposition(exponentiatedTranspose);
        // Find an eigen value equal to one (up to numerical precision)
        // result will hold the corresponding eigenvalue
        double []  realEigenvalues=eigenDecomp.getRealEigenvalues();
        double []  imageEigenvalues=eigenDecomp.getImagEigenvalues();
        double [][] eigenVectorTranspose = eigenDecomp.getV().transpose().getArray();
        for (int i = 0; i < dim; i++)
            if (NumericalUtils.isClose(0.0, imageEigenvalues[i], NumericalUtils.THRESHOLD)&&
                    NumericalUtils.isClose(1.0, realEigenvalues[i], NumericalUtils.THRESHOLD))
            {
                result = eigenVectorTranspose[i];
            }
        if (result == null)
            throw new RuntimeException("Could not find an eigenvalue equal to one. Not a proper rate matrix?");
        double sum = NumericalUtils.getNormalization(result);
        if (sum < 0.0)
        {
            for (int i = 0; i < result.length; i++)
            {
                result[i] *= -1;
            }
        }
        Multinomial.normalize(result);
        return result;
    }

    /**
     *
     * Fill in ``marginalTransitionProbability()``.
     *
     * Use the diagonalization method covered in class, using
     * the eigen-decomposition functionalities provided by EJML.
     */
    @Tutorial(showSource = false, showLink = true)
    public double [][] marginalTransitionProbability(double branchLength)
    {

        double [][] result = new double [rates.length][rates.length];
        if(useDiag){
            result = RateMatrixUtils.marginalTransitionMtx(rates, branchLength, RateMatrixUtils.MatrixExponentialAlgorithm.DIAGONALIZATION);
        }else{
            // The default method of calculating matrix exponential is using MatrixFunctions.expm() in jblas
            result = RateMatrixUtils.marginalTransitionMtx(rates, branchLength);
        }

        NumericalUtils.checkIsTransitionMatrix(result);

        for (int row = 0; row < result.length; row++)
        {
            Multinomial.normalize(result[row]);
        }
        return result;
    }


    public double [] stationaryDistribution()
    {
        return stationaryDistribution;
    }

    @Override
    public double[][] getRateMatrix()
    {
        return rates;
    }
    public static void main(String [] args)
    {
        SimpleRateMatrix tryMtx = RateMatrices.accordance();
        SimpleMatrix trySimpleMtx =new SimpleMatrix(tryMtx.getRateMatrix());
        RateMatrixUtils.checkValidRateMatrix(tryMtx.getRateMatrix());
        EJMLUtils.simpleEigenDecomposition(trySimpleMtx);
        double [][] rates = {{-0.9959529333192991, 0.05222073196124288, 0.05326467283906897, 0.05214623470659327, 0.05190421938211128, 0.05278825349972858, 0.05382409288900768, 0.05219058287828045, 0.05277678277520026, 0.051707655762861515, 0.052073312337963376, 0.05213699622652936, 0.052854922269989876, 0.052111126418062266, 0.05260745953974053, 0.052777290654352924, 0.05238000328894936, 0.05150475289703106, 0.05255717883905297, 0.052126664153532586}, {0.05228501323020778, -0.9964378628576087, 0.052998369910473214, 0.05275612507522713, 0.05192770716441978, 0.05340565277251667, 0.05355499307479011, 0.05221420024626693, 0.05219971895881016, 0.05173105459587931, 0.05209687663849301, 0.05301906410445623, 0.052878840265925244, 0.05213470783028132, 0.05263126555343618, 0.05251342444969101, 0.052118123368690636, 0.051528059912111894, 0.05229441310901914, 0.05215025259691313}, {0.0527542820561884, 0.05242599694516812, -1.0067666901255756, 0.052478611678414715, 0.05239376909443444, 0.05312472266082343, 0.05525236694127663, 0.05268283351104587, 0.052984233438205464, 0.05219535152834947, 0.052564456899585464, 0.05234193206887434, 0.053353438812578584, 0.052602627634157816, 0.05310364206575321, 0.05417778680291067, 0.05376995703530684, 0.05199053492523947, 0.05395183410897223, 0.05261831191829065}, {0.052684925734789216, 0.053235586003164734, 0.053533704983679604, -1.0045726053657822, 0.0523248867412492, 0.05358846470540802, 0.05409595058323217, 0.05261357112341031, 0.05289023765385682, 0.05212673003574177, 0.052495350142279615, 0.05315022295405643, 0.05328329477676182, 0.052533470693594195, 0.053033826438982724, 0.05304386110216885, 0.05264456709584844, 0.05192218270605564, 0.052822637533983384, 0.05254913435751937}, {0.05226136383230813, 0.05222073196124288, 0.05326467283906897, 0.05214623470659327, -0.996310077769496, 0.05278825349972858, 0.05382409288900768, 0.05219058287828045, 0.05277678277520026, 0.051707655762861515, 0.052073312337963376, 0.05213699622652936, 0.052854922269989876, 0.052111126418062266, 0.05260745953974053, 0.052777290654352924, 0.05238000328894936, 0.05150475289703106, 0.05255717883905297, 0.052126664153532586}, {0.052684925734789216, 0.053235586003164734, 0.053533704983679604, 0.05293671362149847, 0.0523248867412492, -1.0039208542818727, 0.05409595058323217, 0.05261357112341031, 0.05289023765385682, 0.05212673003574177, 0.052495350142279615, 0.05315022295405643, 0.05328329477676182, 0.052533470693594195, 0.053033826438982724, 0.05304386110216885, 0.05264456709584844, 0.05192218270605564, 0.052822637533983384, 0.05254913435751937}, {0.0527542820561884, 0.05242599694516812, 0.054678102142476225, 0.052478611678414715, 0.05239376909443444, 0.05312472266082343, -1.0061924253267753, 0.05268283351104587, 0.052984233438205464, 0.05219535152834947, 0.052564456899585464, 0.05234193206887434, 0.053353438812578584, 0.052602627634157816, 0.05310364206575321, 0.05417778680291067, 0.05376995703530684, 0.05199053492523947, 0.05395183410897223, 0.05261831191829065}, {0.05226136383230813, 0.05222073196124288, 0.05326467283906897, 0.05214623470659327, 0.05190421938211128, 0.05278825349972858, 0.05382409288900768, -0.9960237142733269, 0.05277678277520026, 0.051707655762861515, 0.052073312337963376, 0.05213699622652936, 0.052854922269989876, 0.052111126418062266, 0.05260745953974053, 0.052777290654352924, 0.05238000328894936, 0.05150475289703106, 0.05255717883905297, 0.052126664153532586}, {0.05278856434535665, 0.05214718097756862, 0.05350879128403178, 0.05236113353374686, 0.0524278171048082, 0.053005798137963876, 0.0540707752237945, 0.052717069369486794, -1.0021957768559535, 0.052229270597372666, 0.05259861583116724, 0.052063563181563084, 0.053388110462844716, 0.052636811370932825, 0.05313815138598708, 0.05301917536775044, 0.05262006718624727, 0.05202432089450772, 0.052798054753349595, 0.05265250584747363}, {0.05226136383230813, 0.05222073196124288, 0.05326467283906897, 0.05214623470659327, 0.05190421938211128, 0.05278825349972858, 0.05382409288900768, 0.05219058287828045, 0.05277678277520026, -0.9965066413887458, 0.052073312337963376, 0.05213699622652936, 0.052854922269989876, 0.052111126418062266, 0.05260745953974053, 0.052777290654352924, 0.05238000328894936, 0.05150475289703106, 0.05255717883905297, 0.052126664153532586}, {0.05226136383230813, 0.05222073196124288, 0.05326467283906897, 0.05214623470659327, 0.05190421938211128, 0.05278825349972858, 0.05382409288900768, 0.05219058287828045, 0.05277678277520026, 0.051707655762861515, -0.9961409848136439, 0.05213699622652936, 0.052854922269989876, 0.052111126418062266, 0.05260745953974053, 0.052777290654352924, 0.05238000328894936, 0.05150475289703106, 0.05255717883905297, 0.052126664153532586}, {0.05228501323020778, 0.05310421650309692, 0.052998369910473214, 0.05275612507522713, 0.05192770716441978, 0.05340565277251667, 0.05355499307479011, 0.05221420024626693, 0.05219971895881016, 0.05173105459587931, 0.05209687663849301, -0.9965230152562495, 0.052878840265925244, 0.05213470783028132, 0.05263126555343618, 0.05251342444969101, 0.052118123368690636, 0.051528059912111894, 0.05229441310901914, 0.05215025259691313}, {0.05226136383230813, 0.05222073196124288, 0.05326467283906897, 0.05214623470659327, 0.05190421938211128, 0.05278825349972858, 0.05382409288900768, 0.05219058287828045, 0.05277678277520026, 0.051707655762861515, 0.052073312337963376, 0.05213699622652936, -0.9953593748816174, 0.052111126418062266, 0.05260745953974053, 0.052777290654352924, 0.05238000328894936, 0.05150475289703106, 0.05255717883905297, 0.052126664153532586}, {0.05226136383230813, 0.05222073196124288, 0.05326467283906897, 0.05214623470659327, 0.05190421938211128, 0.05278825349972858, 0.05382409288900768, 0.05219058287828045, 0.05277678277520026, 0.051707655762861515, 0.052073312337963376, 0.05213699622652936, 0.052854922269989876, -0.996103170733545, 0.05260745953974053, 0.052777290654352924, 0.05238000328894936, 0.05150475289703106, 0.05255717883905297, 0.052126664153532586}, {0.05226136383230813, 0.05222073196124288, 0.05326467283906897, 0.05214623470659327, 0.05190421938211128, 0.05278825349972858, 0.05382409288900768, 0.05219058287828045, 0.05277678277520026, 0.051707655762861515, 0.052073312337963376, 0.05213699622652936, 0.052854922269989876, 0.052111126418062266, -0.9956068376118667, 0.052777290654352924, 0.05238000328894936, 0.05150475289703106, 0.05255717883905297, 0.052126664153532586}, {0.0527542820561884, 0.05242599694516812, 0.054678102142476225, 0.052478611678414715, 0.05239376909443444, 0.05312472266082343, 0.05525236694127663, 0.05268283351104587, 0.052984233438205464, 0.05219535152834947, 0.052564456899585464, 0.05234193206887434, 0.053353438812578584, 0.052602627634157816, 0.05310364206575321, -1.0072670054651411, 0.05376995703530684, 0.05199053492523947, 0.05395183410897223, 0.05261831191829065}, {0.0527542820561884, 0.05242599694516812, 0.054678102142476225, 0.052478611678414715, 0.05239376909443444, 0.05312472266082343, 0.05525236694127663, 0.05268283351104587, 0.052984233438205464, 0.05219535152834947, 0.052564456899585464, 0.05234193206887434, 0.053353438812578584, 0.052602627634157816, 0.05310364206575321, 0.05417778680291067, -1.007674835232745, 0.05199053492523947, 0.05395183410897223, 0.05261831191829065}, {0.05226136383230813, 0.05222073196124288, 0.05326467283906897, 0.05214623470659327, 0.05190421938211128, 0.05278825349972858, 0.05382409288900768, 0.05219058287828045, 0.05277678277520026, 0.051707655762861515, 0.052073312337963376, 0.05213699622652936, 0.052854922269989876, 0.052111126418062266, 0.05260745953974053, 0.052777290654352924, 0.05238000328894936, -0.9967095442545763, 0.05255717883905297, 0.052126664153532586}, {0.0527542820561884, 0.05242599694516812, 0.054678102142476225, 0.052478611678414715, 0.05239376909443444, 0.05312472266082343, 0.05525236694127663, 0.05268283351104587, 0.052984233438205464, 0.05219535152834947, 0.052564456899585464, 0.05234193206887434, 0.053353438812578584, 0.052602627634157816, 0.05310364206575321, 0.05417778680291067, 0.05376995703530684, 0.05199053492523947, -1.0074929581590797, 0.05261831191829065}, {0.05226136383230813, 0.05222073196124288, 0.05326467283906897, 0.05214623470659327, 0.05190421938211128, 0.05278825349972858, 0.05382409288900768, 0.05219058287828045, 0.05277678277520026, 0.051707655762861515, 0.052073312337963376, 0.05213699622652936, 0.052854922269989876, 0.052111126418062266, 0.05260745953974053, 0.052777290654352924, 0.05238000328894936, 0.05150475289703106, 0.05255717883905297, -0.9960876329980747}};
        SimpleMatrix secondMtx = new SimpleMatrix(rates);
        //EJMLUtils.simpleEigenDecomposition(secondMtx);
        DoubleMatrix rateMatrix = new DoubleMatrix(rates);
        System.out.println("finished");
    }

}
