options { JDK_VERSION = "1.5"; STATIC = false; LOOKAHEAD = 10; }
PARSER_BEGIN(NewickParser)
package conifer.io.newick;

import briefj.collections.Tree;
import conifer.TreeNode;
import java.util.Map;
import java.util.LinkedHashMap;
import java.util.ArrayList;
import java.util.List;
import java.util.ArrayList;
import java.io.StringBufferInputStream;

/**
 * Source of grammar: https://code.google.com/p/phylopy/wiki/Newick
 */
public class NewickParser 
{
	private Tree<TreeNode> tree;
	private Map<TreeNode, Double> branchLengths;

	public Tree<TreeNode> parse() throws ParseException 
	{
		branchLengths = new LinkedHashMap<TreeNode, Double>();
		return tree();
	}
	public NewickParser(String str)
	{
		this(new StringBufferInputStream(str));
	}
	public Map<TreeNode, Double> getBranchLengths() { return branchLengths; }
}
PARSER_END(NewickParser)

SKIP : { " " |	"\r" |	"\t" |	"\n" }
TOKEN : 
{
  < NUMBER_STRING: ["0"-"9",".","-"] ( ["0"-"9",".","E","e","-"] )* >
|	
  < NODE_NAME_STRING: ["a"-"z","A"-"Z","_"] ( ["a"-"z","A"-"Z","_","-","0"-"9","."] )* >
}
private Tree<TreeNode> tree() :         { Tree<TreeNode> result; }
{
	result = node()     
	";"
	{ return result; }
}     
private Tree<TreeNode> node() :         { TreeNode label = TreeNode.nextUnlabelled(); List<Tree<TreeNode>> children = new ArrayList<Tree<TreeNode>>(); }
{
	children = children()
	[label = label()]
	[length(label)]
	{ return new Tree<TreeNode>(label, children); }
|
	[children = children()]
	label = label()
	[length(label)]
	{ return new Tree<TreeNode>(label, children); }
} 
private TreeNode label() : 			{ Token t; }
{
	t = <NODE_NAME_STRING> 	
	{ return TreeNode.withLabel(t.image); }
}
private void length(TreeNode label) : 			{ Token t; }
{
	":"
	t = <NUMBER_STRING>
	{ 
		Double length = Double.parseDouble(t.image); 
		branchLengths.put(label, length);
	}
}
private List<Tree<TreeNode>> children() :
{ 
	List<Tree<TreeNode>> children = new ArrayList<Tree<TreeNode>>(); 
	Tree<TreeNode> child; 
}
{
	"("
	child = node() 	
	{ children.add(child); }
	( 
		","
		child = node() 	
		{ children.add(child); }
	)*
	")"											
	{ return children; }
}





