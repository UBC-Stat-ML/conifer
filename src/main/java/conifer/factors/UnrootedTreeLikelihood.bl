package conifer.factors

import conifer.io.TreeObservations
import conifer.UnrootedTree
import conifer.EvolutionaryModel
import conifer.TreeNode;
import conifer.models.LikelihoodComputationContext
import conifer.TopologyUtils
import conifer.models.EvolutionaryModelUtils

model UnrootedTreeLikelihood {
  
  random TreeObservations observations
  param UnrootedTree tree
  param EvolutionaryModel evolutionaryModel
  
  laws {
    logf(tree, observations, evolutionaryModel) {
      val TreeNode arbitraryRoot = TopologyUtils.arbitraryNode(tree)
      val LikelihoodComputationContext context = new LikelihoodComputationContext(
        EvolutionaryModelUtils::buildFactorGraphs(
          evolutionaryModel, 
          tree, 
          arbitraryRoot, 
          observations), 
        arbitraryRoot)
      return evolutionaryModel.computeLogLikelihood(context)
    }
  }
  
  generate (rand) {
  	  observations.clear()
    evolutionaryModel.generateObservationsInPlace(rand, observations, tree, TopologyUtils.arbitraryNode(tree))
  }
}